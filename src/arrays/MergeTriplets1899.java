package arrays;

import static medium.Util.printArray;

public class MergeTriplets1899 {
    public static void main(String[] args) {
        MergeTriplets1899Solution sol = new MergeTriplets1899Solution();
        int[][] ex1 = {
                {2, 5, 3},
                {1, 8, 4},
                {1, 7, 5}
        };
        int[] t1 = {2, 8, 4};
        int[][] ex2 = {
                {3, 4, 5},
                {4, 5, 6}
        };
        int[] t2 = {3, 2, 5};
        int[][] ex3 = {
                {2, 5, 3},
                {2, 3, 4},
                {1, 2, 5},
                {5, 2, 3}
        };
        int[] t3 = {5, 5, 5};

        int[][] ex4 = {
                {91, 69, 17}, {36, 6, 7}, {71, 38, 90}, {17, 82, 97}, {63, 14, 2}, {74, 37, 61}, {62, 57, 44}, {24, 7, 33}, {62, 15, 9}, {52, 63, 10}, {74, 81, 88}, {7, 20, 20}, {73, 39, 11}, {32, 16, 72}, {98, 54, 78}, {77, 80, 29}, {100, 67, 49}, {58, 57, 39}, {76, 55, 40}, {73, 80, 8}, {79, 95, 13}, {98, 27, 81}, {28, 34, 85}, {11, 21, 31}, {23, 71, 10}, {21, 1, 53}, {58, 89, 77}, {61, 38, 5}, {30, 37, 91}, {37, 90, 59}, {10, 88, 30}, {34, 81, 76}, {85, 26, 55}, {15, 70, 29}, {83, 20, 35}, {19, 10, 8}, {22, 40, 77}, {96, 73, 37}, {57, 16, 60}, {89, 39, 90}, {52, 35, 65}, {70, 64, 57}, {11, 77, 6}, {56, 95, 42}, {78, 33, 4}, {12, 30, 87}, {74, 76, 3}, {98, 87, 35}, {74, 6, 98}, {97, 23, 61}, {67, 84, 57}, {36, 24, 75}, {56, 82, 63}, {12, 61, 45}, {53, 43, 42}, {86, 14, 21}, {43, 53, 89}, {64, 37, 85}, {52, 98, 71}, {5, 59, 12}, {41, 33, 42}, {15, 99, 52}, {66, 1, 85}, {70, 60, 53}, {7, 25, 67}, {47, 80, 97}, {64, 81, 57}, {98, 7, 27}, {35, 71, 17}, {37, 57, 90}, {63, 16, 4}, {81, 78, 31}, {91, 21, 40}, {71, 2, 71}, {53, 12, 29}, {15, 60, 16}, {83, 20, 64}, {92, 38, 66}, {91, 35, 54}, {62, 61, 32}, {59, 71, 19}, {50, 25, 77}, {66, 96, 18}, {9, 36, 99}, {54, 44, 65}, {35, 1, 37}, {93, 39, 76}, {75, 85, 63}, {20, 58, 69}, {62, 45, 43}, {71, 98, 70}, {49, 59, 42}, {25, 90, 31}, {74, 50, 30}, {100, 53, 6}, {41, 96, 61}, {91, 49, 50}, {85, 84, 20}, {64, 5, 17}, {65, 76, 43}, {13, 57, 13}, {68, 59, 2}, {93, 19, 53}, {84, 20, 10}, {61, 34, 44}, {80, 89, 51}, {84, 11, 43}, {87, 69, 49}, {41, 81, 92}, {98, 63, 70}, {5, 80, 9}, {31, 81, 88}, {37, 30, 96}, {12, 56, 13}, {98, 82, 91}, {13, 57, 22}, {89, 39, 4}, {6, 42, 8}, {38, 46, 48}, {56, 19, 32}, {68, 53, 73}, {88, 24, 22}, {23, 11, 79}, {49, 80, 88}, {31, 64, 75}, {19, 30, 60}, {82, 33, 59}, {33, 86, 2}, {60, 37, 87}, {70, 21, 10}, {57, 45, 76}, {39, 82, 55}, {89, 33, 59}, {39, 26, 50}, {62, 14, 31}, {49, 74, 46}, {74, 38, 90}, {38, 3, 85}, {51, 36, 2}, {73, 88, 100}, {96, 7, 78}, {96, 64, 37}, {100, 30, 78}, {46, 29, 82}, {25, 80, 33}, {87, 97, 93}, {99, 85, 88}, {18, 81, 13}, {81, 83, 6}, {40, 57, 5}, {75, 47, 94}, {17, 12, 38}, {42, 96, 54}, {23, 26, 17}, {70, 47, 68}, {65, 35, 22}, {33, 62, 38}, {96, 44, 15}, {60, 10, 19}, {97, 29, 87}, {93, 87, 51}, {72, 47, 12}, {51, 2, 34}, {69, 16, 59}, {48, 87, 96}, {87, 34, 75}, {49, 82, 48}, {14, 87, 30}, {61, 4, 80}, {72, 42, 79}, {29, 83, 9}, {82, 60, 90}, {39, 84, 53}, {15, 18, 6}, {5, 39, 64}, {15, 13, 31}, {69, 18, 50}, {59, 48, 86}, {96, 90, 70}, {54, 76, 96}, {94, 20, 54}, {84, 13, 63}, {79, 53, 36}, {5, 89, 48}, {28, 57, 57}, {31, 47, 13}, {88, 48, 70}, {83, 46, 8}, {51, 36, 25}, {16, 59, 12}, {85, 28, 83}, {82, 77, 3}, {7, 43, 32}, {17, 73, 27}, {9, 98, 71}, {27, 76, 28}, {30, 43, 100}, {19, 77, 1}, {36, 19, 17}, {70, 33, 23}, {15, 85, 4}, {17, 2, 46}, {31, 76, 42}, {3, 23, 34}, {7, 17, 95}, {54, 68, 15}, {96, 9, 61}, {58, 100, 47}, {66, 76, 14}, {58, 65, 29}, {79, 6, 94}, {85, 67, 39}, {59, 83, 4}, {8, 62, 52}, {55, 88, 14}, {63, 92, 57}, {10, 11, 42}, {78, 19, 9}, {17, 36, 80}, {82, 75, 71}, {92, 42, 49}, {77, 68, 38}, {59, 65, 78}, {56, 13, 90}, {15, 84, 84}, {99, 71, 93}, {28, 56, 58}, {30, 53, 44}, {59, 52, 54}, {94, 13, 41}, {55, 41, 86}, {33, 48, 20}, {88, 61, 9}, {12, 11, 12}, {56, 13, 96}, {95, 48, 17}, {72, 8, 76}, {72, 72, 43}, {86, 16, 53}, {46, 86, 97}, {55, 93, 7}, {37, 77, 40}, {46, 14, 74}, {65, 28, 20}, {85, 62, 29}, {14, 45, 72}, {48, 15, 98}, {36, 74, 29}, {55, 72, 99}, {80, 79, 87}, {83, 72, 4}, {78, 85, 89}, {35, 4, 24}, {35, 90, 98}, {40, 44, 45}, {1, 24, 19}, {73, 85, 52}, {9, 19, 95}, {82, 4, 12}, {96, 68, 28}, {49, 54, 59}, {44, 21, 48}, {40, 93, 42}, {100, 73, 77}, {11, 7, 20}, {21, 97, 80}, {7, 87, 11}, {35, 57, 85}, {55, 63, 78}, {57, 54, 35}, {28, 97, 66}, {15, 45, 56}, {15, 37, 87}, {87, 76, 63}, {68, 86, 40}, {6, 29, 51}, {77, 8, 1}, {27, 39, 28}, {99, 18, 98}, {33, 38, 42}, {16, 1, 64}, {96, 56, 23}, {17, 49, 69}, {91, 30, 65}, {72, 86, 46}, {10, 51, 95}, {6, 56, 3}, {59, 10, 41}, {74, 55, 74}, {52, 91, 82}, {54, 38, 15}, {52, 3, 42}, {22, 80, 59}, {89, 47, 12}, {56, 14, 32}, {56, 76, 52}, {68, 11, 51}, {40, 96, 44}, {29, 43, 100}, {22, 10, 66}, {82, 15, 68}, {66, 25, 100}, {45, 45, 94}, {83, 19, 31}, {14, 19, 33}, {26, 23, 78}, {20, 98, 98}, {84, 10, 23}, {99, 81, 64}, {60, 97, 73}, {98, 75, 58}, {88, 73, 83}, {82, 80, 42}, {81, 41, 20}, {57, 9, 61}, {57, 81, 39}, {36, 76, 8}, {46, 65, 10}, {40, 60, 58}, {5, 8, 48}, {37, 10, 83}, {12, 79, 77}, {65, 50, 60}, {75, 71, 95}, {6, 58, 74}, {84, 25, 42}, {78, 61, 65}, {20, 8, 58}, {14, 44, 92}, {11, 65, 83}, {23, 6, 32}, {91, 57, 57}, {68, 67, 79}, {21, 47, 48}, {37, 50, 53}, {100, 44, 87}, {77, 7, 81}, {83, 43, 9}, {43, 13, 72}, {87, 50, 37}, {33, 93, 85}, {78, 20, 43}, {11, 75, 85}, {19, 45, 40}, {84, 90, 85}, {51, 17, 77}, {91, 11, 40}, {72, 49, 83}, {43, 17, 86}, {90, 95, 88}, {68, 12, 83}, {86, 55, 66}, {47, 3, 47}, {40, 24, 28}, {44, 99, 63}, {25, 29, 18}, {20, 10, 38}, {13, 65, 99}, {70, 95, 68}, {5, 85, 44}, {99, 80, 17}, {77, 49, 20}, {21, 24, 89}, {99, 80, 22}, {93, 57, 6}, {53, 47, 87}, {93, 31, 57}, {79, 37, 97}, {96, 58, 30}, {69, 31, 40}, {61, 25, 48}, {87, 74, 57}, {60, 99, 37}, {100, 49, 65}, {68, 54, 21}, {26, 78, 18}, {33, 7, 83}, {62, 48, 71}, {14, 92, 67}, {16, 37, 11}, {98, 21, 35}, {58, 66, 19}, {56, 12, 29}, {58, 45, 4}, {54, 7, 51}, {65, 48, 31}, {50, 11, 48}, {29, 4, 41}, {13, 92, 84}, {43, 19, 18}, {5, 37, 61}, {90, 18, 98}, {91, 61, 58}, {79, 1, 11}, {3, 33, 28}, {20, 71, 94}, {78, 68, 55}, {15, 100, 37}, {31, 39, 16}, {7, 31, 54}, {82, 80, 59}, {9, 15, 64}, {77, 69, 3}, {81, 66, 74}, {31, 92, 19}, {38, 55, 1}, {79, 46, 31}, {74, 54, 24}, {86, 86, 11}, {68, 47, 9}, {68, 70, 65}, {65, 71, 3}, {50, 61, 6}, {82, 50, 48}, {33, 96, 3}, {46, 9, 45}, {31, 94, 85}, {81, 14, 99}, {75, 95, 97}, {43, 18, 6}, {46, 70, 44}, {83, 23, 100}, {88, 60, 90}, {62, 81, 24}, {18, 9, 92}, {100, 59, 5}, {38, 26, 6}, {26, 6, 41}, {40, 66, 51}, {70, 61, 33}, {5, 97, 83}, {25, 37, 46}, {100, 7, 84}, {43, 35, 16}, {48, 56, 52}, {96, 57, 50}, {44, 24, 64}, {89, 64, 48}, {67, 35, 11}, {94, 55, 11}, {56, 78, 24}, {70, 38, 42}, {14, 11, 42}, {85, 38, 40}, {58, 78, 92}, {55, 22, 89}, {57, 45, 58}, {6, 94, 46}, {79, 56, 36}, {82, 8, 10}, {86, 82, 52}, {47, 66, 96}, {87, 21, 4}, {19, 78, 87}, {57, 5, 17}, {9, 31, 100}, {83, 47, 47}, {50, 73, 5}, {78, 20, 87}, {58, 48, 48}, {57, 98, 10}, {74, 18, 68}, {47, 51, 41}, {84, 36, 32}, {15, 4, 95}, {24, 64, 67}, {50, 72, 16}, {34, 100, 34}, {91, 58, 28}, {79, 37, 89}, {63, 26, 16}, {18, 10, 58}, {23, 92, 57}, {12, 88, 41}, {86, 45, 91}, {9, 71, 70}, {38, 39, 21}, {92, 91, 90}, {82, 23, 47}, {66, 29, 16}, {26, 18, 31}, {64, 4, 47}, {71, 74, 48}, {60, 71, 17}, {79, 12, 9}, {40, 51, 92}, {93, 62, 68}, {53, 99, 53}, {74, 10, 17}, {41, 83, 10}, {58, 60, 88}, {67, 45, 17}, {100, 71, 82}, {76, 24, 99}, {17, 56, 65}, {8, 16, 67}, {20, 39, 22}, {21, 42, 91}, {29, 45, 67}, {37, 11, 33}
        };
        int[] t4 = {82, 71, 36};

        boolean b1 = sol.mergeTriplets(ex1, t1);
        System.out.println(" " + b1);

        boolean b2 = sol.mergeTriplets(ex2, t2);
        System.out.println(" " + b2);

        boolean b3 = sol.mergeTriplets(ex3, t3);
        System.out.println(" " + b3);

        boolean b4 = sol.mergeTriplets(ex4, t4);
        System.out.println(" " + b4);

    }
}

class MergeTriplets1899Solution {
    public boolean mergeTriplets(int[][] triplets, int[] target) {

        boolean firstMatch = false, secMatch = false, thirdMatch = false;
        for (int[] triplet : triplets) {
            if (triplet[0] > target[0] || triplet[1] > target[1] || triplet[2] > target[2]) continue;
            if (triplet[0] == target[0]) {
                firstMatch = true;
            }
            if (triplet[1] == target[1]) {
                secMatch = true;
            }
            if (triplet[2] == target[2]) {
                thirdMatch = true;
            }
        }
        return firstMatch && secMatch && thirdMatch;
    }
}
